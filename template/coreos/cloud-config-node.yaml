#cloud-config

ssh_authorized_keys:
  {{range .SSHAuthorizedKeys}}- {{.}}
  {{end}}

coreos:
  flannel:
    interface: $private_ipv4
    etcd_endpoints: "{{.EtcdURL}}"
    etcd_certfile: /etc/ssl/etcd/client.crt
    etcd_keyfile: /etc/ssl/etcd/client.key

  fleet:
    metadata: role=node,hostname={{.Name}},region={{.Region}},private_ipv4=$private_ipv4
    etcd_servers: "{{.EtcdURL}}"
    etcd_certfile: /etc/ssl/etcd/client.crt
    etcd_keyfile: /etc/ssl/etcd/client.key

  locksmith:
    endpoint: "{{.EtcdURL}}"
    etcd_certfile: /etc/ssl/etcd/client.crt
    etcd_keyfile: /etc/ssl/etcd/client.key

  units:
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl --cert-file=/etc/ssl/etcd/client.crt --key-file=/etc/ssl/etcd/client.key  -C {{.EtcdURL}} --no-sync set /coreos.com/network/config '{ "Network": "10.0.0.0/16" }'

    - name: etcd2.service
      command: start

    - name: fleet.service
      command: start

    - name: floating-ip.service
      command: start
      content: |
        {{range readLinesTemplate . "template/coreos/units/floating-ip.service"}}{{.}}
        {{end}}

    - name: arptables.service
      command: start
      content: |
        {{range readLinesTemplate . "template/coreos/units/arptables.service"}}{{.}}
        {{end}}

    - name: docker.service
      command: start
      enable: true
      drop-ins:
        - name: 40-flanneld.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service

            [Install]
            WantedBy=multi-user.target

    - name: kubelet.service
      command: start
      enable: true
      drop-ins:
        - name: 40-docker.conf
          content: |
            [Unit]
            Requires=docker.service
            After=docker.service
      content: |
        [Unit]
        Description=Kubernetes Kubelet

        [Service]
        Restart=always
        RestartSec=10
        Environment="PATH=/opt/bin:/usr/bin:$PATH"
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/curl -L -o /var/lib/kubelet/kubelet -z /kubelet https://storage.googleapis.com/kubernetes-release/release/v1.1.7/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /var/lib/kubelet/kubelet
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/socat https://s3-eu-west-1.amazonaws.com/kubermatic/coreos/socat
        ExecStartPre=/usr/bin/chmod +x /opt/bin/socat
        ExecStart=/var/lib/kubelet/kubelet \
          --kubeconfig=/var/run/kubelet/kubeconfig \
          --cluster-dns=10.10.10.10 \
          --cluster-domain=cluster.local \
          --resolv-conf="" \
          --api-servers={{.APIServerURL}} \
          --hostname_override=$private_ipv4 \
          --address=$private_ipv4 \
          --allow-privileged=true \
          --config=/var/run/kubernetes/manifests \
          --v=2 \
          --logtostderr=true

        [Install]
        WantedBy=multi-user.target

write_files:
  - path: "/var/run/kubernetes/manifests/proxy.yaml"
    encoding: base64
    content: |
      {{readBase64Template . "template/coreos/manifests/proxy-node.yaml"}}

  - path: "/etc/ssl/etcd/root-ca.crt"
    permissions: "0444"
    encoding: base64
    content: |
      {{readBase64 "template/coreos/certs/root-ca.crt"}}

  - path: "/etc/ssl/etcd/client.key"
    permissions: "0444"
    encoding: base64
    content: |
      {{readBase64 "template/coreos/certs/client.key"}}

  - path: "/etc/ssl/etcd/client.crt"
    permissions: "0444"
    encoding: base64
    content: |
      {{readBase64 "template/coreos/certs/client.crt"}}

  - path: "/var/run/kubelet/kubeconfig"
    permissions: "0400"
    content: |
      apiVersion: v1
      clusters:
      - cluster:
          server: "{{.APIServerURL}}"
        name: do-{{.Region}}.kubermatic.io
      contexts:
      - context:
          cluster: do-{{.Region}}.kubermatic.io
          user: do-{{.Region}}.kubermatic.io
        name: do-{{.Region}}.kubermatic.io
      current-context: do-{{.Region}}.kubermatic.io
      kind: Config
      preferences: {}
      users:
      - name: do-{{.Region}}.kubermatic.io
        user:
          token: {{.KubeletToken}}
